import type {
  LearningData,
  UserPreferences,
  ProjectPattern,
  CodeTemplate,
  UserBehavior,
  CommonRequest,
  GeneratedCode,
} from '../types';

const LEARNING_DATA_KEY = 'doveable-ai-learning-data';

/**
 * Initializes and returns the default learning data structure.
 * @returns {LearningData} A fresh LearningData object.
 */
const createDefaultLearningData = (): LearningData => ({
  userPreferences: {
    preferredTechStack: ['HTML', 'CSS', 'JavaScript'],
    codingStyle: {
      indentation: 'spaces',
      spacesCount: 2,
      quoteStyle: 'double',
      semicolons: true,
      componentStructure: 'functional',
    },
    projectTypes: [],
    uiPreferences: {
      theme: 'light',
      layout: 'sidebar',
      fontSize: 14,
      colorScheme: ['#4f46e5'],
    },
    learningFocus: [],
  },
  projectPatterns: [],
  codeTemplates: [],
  userBehavior: [],
  commonRequests: [],
  knowledgeBase: [],
});

/**
 * Service to manage the AI's learning and adaptation based on user interactions.
 * All data is stored locally in the browser's localStorage.
 */
export class LearningService {
  private learningData: LearningData;

  constructor() {
    this.learningData = this.loadLearningData();
  }

  /**
   * Loads learning data from localStorage or initializes it if not present.
   * @returns {LearningData} The loaded or new learning data.
   */
  private loadLearningData(): LearningData {
    try {
      const storedData = localStorage.getItem(LEARNING_DATA_KEY);
      if (storedData) {
        return JSON.parse(storedData);
      }
    } catch (error) {
      console.error('Failed to load learning data, resetting.', error);
      localStorage.removeItem(LEARNING_DATA_KEY);
    }
    const defaultData = createDefaultLearningData();
    this.saveLearningData(defaultData);
    return defaultData;
  }

  /**
   * Saves the current learning data to localStorage.
   * @param {LearningData} data The data to save.
   */
  private saveLearningData(data: LearningData): void {
    try {
      localStorage.setItem(LEARNING_DATA_KEY, JSON.stringify(data));
    } catch (error) {
      console.error('Failed to save learning data.', error);
    }
  }

  /**
   * Retrieves the current learning data.
   * @returns {LearningData} The current state of the learning data.
   */
  public getLearningData(): LearningData {
    return this.learningData;
  }
  
  /**
   * Compiles learned data into a context string to be used in AI prompts.
   * @param {string} prompt The current user prompt to find relevant context for.
   * @returns {string} A formatted string of learned context.
   */
  public getPersonalizedContextForPrompt(prompt: string): string {
    const data = this.getLearningData();
    const contextParts = [];

    if (data.userPreferences) {
        contextParts.push(`The user has shown a preference for this tech stack: ${data.userPreferences.preferredTechStack.join(', ')}. Please prioritize these technologies.`);
    }

    const commonRequests = data.commonRequests
        .sort((a, b) => b.frequency - a.frequency)
        .slice(0, 2)
        .map(r => `- For a past request like "${r.request}", you generated a page titled "${r.response}".`)
        .join('\n');

    if (commonRequests) {
        contextParts.push(`\nBased on the user's past requests:\n${commonRequests}`);
    }

    if (contextParts.length > 0) {
        return `--- LEARNING CONTEXT ---\nThis context is derived from the user's past interactions to help you personalize the response. Do not mention this context directly to the user.\n\n${contextParts.join('\n')}\n--- END LEARNING CONTEXT ---\n\n`;
    }
    return '';
  }

  /**
   * Analyzes a successful code generation event to update the knowledge base.
   * @param {string} prompt The user's prompt.
   * @param {GeneratedCode} generatedCode The code generated by the AI.
   */
  public updateFromGeneration(prompt: string, generatedCode: GeneratedCode): void {
    this.updateCommonRequests(prompt, generatedCode);
    this.extractCodeTemplates(prompt, generatedCode);
    this.updateProjectPatterns(generatedCode);
    
    this.saveLearningData(this.learningData);
  }

  /**
   * Records a user behavior event.
   * @param {string} action The action performed by the user (e.g., 'generate-code-success').
   * @param {string} context Additional context for the action.
   * @param {boolean} success Whether the action was successful.
   */
  public recordUserBehavior(action: string, context: string, success: boolean): void {
    const behavior: UserBehavior = {
        id: `behavior-${Date.now()}`,
        timestamp: new Date(),
        action,
        context,
        success,
        filesInvolved: [],
    };
    this.learningData.userBehavior.push(behavior);
    this.saveLearningData(this.learningData);
  }

  private updateCommonRequests(prompt: string, generatedCode: GeneratedCode): void {
    const existingRequest = this.learningData.commonRequests.find(
      (req) => req.request.toLowerCase() === prompt.toLowerCase()
    );

    if (existingRequest) {
      existingRequest.frequency += 1;
      existingRequest.lastUsed = new Date();
    } else {
      const newRequest: CommonRequest = {
        id: `req-${Date.now()}`,
        request: prompt,
        response: generatedCode.title,
        frequency: 1,
        lastUsed: new Date(),
        successRate: 1.0,
        generatedFiles: ['index.html', 'style.css', 'script.js'],
      };
      this.learningData.commonRequests.push(newRequest);
    }
  }

  private extractCodeTemplates(prompt: string, generatedCode: GeneratedCode): void {
    const createTemplate = (name: string, code: string, language: string) => {
        // Avoid creating empty templates
        if (!code || code.trim().length < 50) return;

        const newTemplate: CodeTemplate = {
            id: `tpl-${language}-${Date.now()}`,
            name: `${name} from "${generatedCode.title}"`,
            description: `Generated from prompt: "${prompt}"`,
            code,
            language,
            context: [prompt],
            usageCount: 1,
            rating: 0,
            tags: [language, 'auto-generated'],
            createdFrom: prompt,
        };
        this.learningData.codeTemplates.push(newTemplate);
    }
    
    createTemplate('HTML Structure', generatedCode.html, 'html');
    createTemplate('CSS Styles', generatedCode.css, 'css');
    createTemplate('JavaScript Logic', generatedCode.javascript, 'javascript');
  }
  
  private updateProjectPatterns(generatedCode: GeneratedCode): void {
    // For now, this is a simple single-page pattern.
    const patternName = 'Single Page Application';
    let pattern = this.learningData.projectPatterns.find(p => p.name === patternName);

    if (pattern) {
        pattern.usageCount += 1;
        pattern.lastUsed = new Date();
    } else {
        pattern = {
            id: `pattern-${Date.now()}`,
            name: patternName,
            description: 'A standard single-page website with HTML, CSS, and JS.',
            fileStructure: [
                { path: 'index.html', type: 'file', required: true },
                { path: 'style.css', type: 'file', required: true },
                { path: 'script.js', type: 'file', required: false },
            ],
            commonComponents: ['Header', 'Main Content', 'Footer'],
            dependencies: [],
            usageCount: 1,
            successRate: 1.0,
            lastUsed: new Date(),
        };
        this.learningData.projectPatterns.push(pattern);
    }
  }
}

// Create a singleton instance for the application to use.
const learningService = new LearningService();
export default learningService;